"use client"

import { useState } from "react"
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Plus, Edit, Trash2, FileText, Database, Globe, MessageSquare, Code, EyeIcon } from "lucide-react"
import { cn } from "@/lib/utils"

interface KnowledgeBaseSource {
    id: number
    knowledge_base_id: number
    source_type: "database" | "file" | "website" | "qa_pair"
    name: string
    description: string | null
    settings: Record<string, any>
    metadata: Record<string, any>
    is_active: boolean
    priority: number
}

interface KnowledgeBaseEntry {
    id: number
    knowledge_base_source_id: number
    content: string
    embedding_vector: string | null
    metadata: Record<string, any>
}

interface KnowledgeBaseEntryManagerProps {
    entries: KnowledgeBaseEntry[]
    selectedSource: KnowledgeBaseSource
    onCreate: (data: Omit<KnowledgeBaseEntry, "id" | "knowledge_base_source_id">) => Promise<KnowledgeBaseEntry | undefined>
    onUpdate: (id: number, data: Partial<Omit<KnowledgeBaseEntry, "id" | "knowledge_base_source_id">>) => Promise<KnowledgeBaseEntry | undefined>
    onDelete: (id: number) => Promise<boolean | undefined>
}

export function KnowledgeBaseEntryManager({
    entries,
    selectedSource,
    onCreate,
    onUpdate,
    onDelete,
}: KnowledgeBaseEntryManagerProps) {
    const [isCreating, setIsCreating] = useState(false)
    const [isEditing, setIsEditing] = useState(false)
    const [isDeleting, setIsDeleting] = useState(false)
    const [isViewing, setIsViewing] = useState(false)
    const [selectedEntry, setSelectedEntry] = useState<KnowledgeBaseEntry | null>(null)
    const [formData, setFormData] = useState({
        content: "",
        metadata: {},
        generate_embedding: true,
    })

    const sourceTypeIcons = {
        file: <FileText className="h-4 w-4" />,
        database: <Database className="h-4 w-4" />,
        website: <Globe className="h-4 w-4" />,
        qa_pair: <MessageSquare className="h-4 w-4" />,
    }

    const resetForm = () => {
        setFormData({
            content: "",
            metadata: {},
            generate_embedding: true,
        })
    }

    const handleCreateClick = () => {
        resetForm()
        setIsCreating(true)
    }

    const handleEditClick = (entry: KnowledgeBaseEntry) => {
        setSelectedEntry(entry)
        setFormData({
            content: entry.content,
            metadata: entry.metadata,
            generate_embedding: true,
        })
        setIsEditing(true)
    }

    const handleDeleteClick = (entry: KnowledgeBaseEntry) => {
        setSelectedEntry(entry)
        setIsDeleting(true)
    }

    const handleViewClick = (entry: KnowledgeBaseEntry) => {
        setSelectedEntry(entry)
        setIsViewing(true)
    }

    const handleCreateSubmit = async (e: React.FormEvent) => {
        e.preventDefault()

        try {
            const result = await onCreate({
                content: formData.content,
                metadata: formData.metadata,
                embedding_vector: null, // Will be generated by the backend
            })

            if (result) {
                setIsCreating(false)
                resetForm()
            }
        } catch (error) {
            console.error("Failed to create entry:", error)
        }
    }

    const handleEditSubmit = async (e: React.FormEvent) => {
        e.preventDefault()

        if (!selectedEntry) {
            return
        }

        try {
            const result = await onUpdate(selectedEntry.id, {
                content: formData.content,
                metadata: formData.metadata,
            })

            if (result) {
                setIsEditing(false)
            }
        } catch (error) {
            console.error("Failed to update entry:", error)
        }
    }

    const handleDeleteSubmit = async () => {
        if (!selectedEntry) {
            return
        }

        try {
            const result = await onDelete(selectedEntry.id)

            if (result) {
                setIsDeleting(false)
                setSelectedEntry(null)
            }
        } catch (error) {
            console.error("Failed to delete entry:", error)
        }
    }

    // Format the content for display based on source type
    const formatContentPreview = (content: string, sourceType: KnowledgeBaseSource["source_type"]) => {
        if (sourceType === "qa_pair") {
            try {
                const parsedContent = JSON.parse(content)
                if (parsedContent.question) {
                    return parsedContent.question
                }
            } catch (e) {
                // If parsing fails, fall back to truncating the content
            }
        }

        return content.length > 50 ? content.substring(0, 50) + "..." : content
    }

    // Format the full content for the view dialog
    const formatFullContent = (content: string, sourceType: KnowledgeBaseSource["source_type"]) => {
        if (sourceType === "qa_pair") {
            try {
                const parsedContent = JSON.parse(content)
                return (
                    <div className="space-y-4">
                        <div>
                            <h4 className="text-sm font-medium">Question:</h4>
                            <p className="mt-1 p-2 bg-muted/50 rounded-md">{parsedContent.question}</p>
                        </div>
                        <div>
                            <h4 className="text-sm font-medium">Answer:</h4>
                            <p className="mt-1 p-2 bg-muted/50 rounded-md whitespace-pre-wrap">{parsedContent.answer}</p>
                        </div>
                    </div>
                )
            } catch (e) {
                // If parsing fails, just display the raw content
            }
        }

        return <p className="whitespace-pre-wrap bg-muted/50 p-2 rounded-md">{content}</p>
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between">
                <div className="space-y-1">
                    <h3 className="text-lg font-medium">Entries for {selectedSource.name}</h3>
                    <div className="flex items-center text-sm text-muted-foreground">
                        {sourceTypeIcons[selectedSource.source_type]}
                        <span className="ml-1">{selectedSource.source_type}</span>
                    </div>
                </div>
                <Button size="sm" onClick={handleCreateClick}>
                    <Plus className="mr-2 h-4 w-4" />
                    Add Entry
                </Button>
            </div>

            {entries.length === 0 ? (
                <div className="border rounded-md p-8 text-center">
                    <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-muted">
                        <Plus className="h-6 w-6" />
                    </div>
                    <h3 className="mt-4 text-lg font-medium">No Entries Added</h3>
                    <p className="mt-2 text-sm text-muted-foreground">
                        Add entries to your knowledge base source.
                    </p>
                    <Button className="mt-4" onClick={handleCreateClick}>
                        Add Entry
                    </Button>
                </div>
            ) : (
                <div className="border rounded-md">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Content Preview</TableHead>
                                <TableHead>Has Embedding</TableHead>
                                <TableHead className="w-[150px]">Actions</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {entries.map((entry) => (
                                <TableRow key={entry.id}>
                                    <TableCell>
                                        {formatContentPreview(entry.content, selectedSource.source_type)}
                                    </TableCell>
                                    <TableCell>
                                        {entry.embedding_vector ?
                                            <div className="flex items-center text-green-500">
                                                <div className="rounded-full w-2 h-2 mr-2 bg-green-500" />
                                                Yes
                                            </div> :
                                            <div className="flex items-center text-red-500">
                                                <div className="rounded-full w-2 h-2 mr-2 bg-red-500" />
                                                No
                                            </div>
                                        }
                                    </TableCell>
                                    <TableCell>
                                        <div className="flex space-x-2">
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => handleViewClick(entry)}
                                            >
                                                <EyeIcon className="h-4 w-4" />
                                            </Button>
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => handleEditClick(entry)}
                                            >
                                                <Edit className="h-4 w-4" />
                                            </Button>
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => handleDeleteClick(entry)}
                                            >
                                                <Trash2 className="h-4 w-4" />
                                            </Button>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </div>
            )}

            {/* Create Entry Dialog */}
            <Dialog open={isCreating} onOpenChange={setIsCreating}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Add Entry</DialogTitle>
                        <DialogDescription>
                            Add a new entry to the knowledge base source.
                        </DialogDescription>
                    </DialogHeader>
                    <form onSubmit={handleCreateSubmit}>
                        <div className="space-y-4 py-2">
                            <div className="space-y-2">
                                <Label htmlFor="content">Content</Label>
                                {selectedSource.source_type === "qa_pair" ? (
                                    <div className="space-y-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="question">Question</Label>
                                            <Textarea
                                                id="question"
                                                value={(() => {
                                                    try {
                                                        const content = JSON.parse(formData.content)
                                                        return content.question || ""
                                                    } catch (e) {
                                                        return ""
                                                    }
                                                })()}
                                                onChange={(e) => {
                                                    try {
                                                        const content = JSON.parse(formData.content || "{}")
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                ...content,
                                                                question: e.target.value
                                                            })
                                                        })
                                                    } catch (e) {
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                question: e.target.value,
                                                                answer: ""
                                                            })
                                                        })
                                                    }
                                                }}
                                                placeholder="Enter the question"
                                                rows={2}
                                                required
                                            />
                                        </div>
                                        <div className="space-y-2">
                                            <Label htmlFor="answer">Answer</Label>
                                            <Textarea
                                                id="answer"
                                                value={(() => {
                                                    try {
                                                        const content = JSON.parse(formData.content)
                                                        return content.answer || ""
                                                    } catch (e) {
                                                        return ""
                                                    }
                                                })()}
                                                onChange={(e) => {
                                                    try {
                                                        const content = JSON.parse(formData.content || "{}")
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                ...content,
                                                                answer: e.target.value
                                                            })
                                                        })
                                                    } catch (e) {
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                question: "",
                                                                answer: e.target.value
                                                            })
                                                        })
                                                    }
                                                }}
                                                placeholder="Enter the answer"
                                                rows={4}
                                                required
                                            />
                                        </div>
                                    </div>
                                ) : (
                                    <Textarea
                                        id="content"
                                        value={formData.content}
                                        onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                                        placeholder="Enter content"
                                        rows={6}
                                        required
                                    />
                                )}
                            </div>
                            <div className="flex items-center space-x-2">
                                <Switch
                                    id="generate_embedding"
                                    checked={formData.generate_embedding}
                                    onCheckedChange={(checked) => setFormData({ ...formData, generate_embedding: checked })}
                                />
                                <Label htmlFor="generate_embedding">Generate embedding</Label>
                            </div>
                        </div>
                        <DialogFooter className="mt-4">
                            <Button type="button" variant="outline" onClick={() => setIsCreating(false)}>
                                Cancel
                            </Button>
                            <Button type="submit">Create</Button>
                        </DialogFooter>
                    </form>
                </DialogContent>
            </Dialog>

            {/* Edit Entry Dialog */}
            <Dialog open={isEditing} onOpenChange={setIsEditing}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Edit Entry</DialogTitle>
                        <DialogDescription>
                            Update the entry content.
                        </DialogDescription>
                    </DialogHeader>
                    <form onSubmit={handleEditSubmit}>
                        <div className="space-y-4 py-2">
                            <div className="space-y-2">
                                <Label htmlFor="edit-content">Content</Label>
                                {selectedSource.source_type === "qa_pair" ? (
                                    <div className="space-y-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="edit-question">Question</Label>
                                            <Textarea
                                                id="edit-question"
                                                value={(() => {
                                                    try {
                                                        const content = JSON.parse(formData.content)
                                                        return content.question || ""
                                                    } catch (e) {
                                                        return ""
                                                    }
                                                })()}
                                                onChange={(e) => {
                                                    try {
                                                        const content = JSON.parse(formData.content || "{}")
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                ...content,
                                                                question: e.target.value
                                                            })
                                                        })
                                                    } catch (e) {
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                question: e.target.value,
                                                                answer: ""
                                                            })
                                                        })
                                                    }
                                                }}
                                                placeholder="Enter the question"
                                                rows={2}
                                                required
                                            />
                                        </div>
                                        <div className="space-y-2">
                                            <Label htmlFor="edit-answer">Answer</Label>
                                            <Textarea
                                                id="edit-answer"
                                                value={(() => {
                                                    try {
                                                        const content = JSON.parse(formData.content)
                                                        return content.answer || ""
                                                    } catch (e) {
                                                        return ""
                                                    }
                                                })()}
                                                onChange={(e) => {
                                                    try {
                                                        const content = JSON.parse(formData.content || "{}")
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                ...content,
                                                                answer: e.target.value
                                                            })
                                                        })
                                                    } catch (e) {
                                                        setFormData({
                                                            ...formData,
                                                            content: JSON.stringify({
                                                                question: "",
                                                                answer: e.target.value
                                                            })
                                                        })
                                                    }
                                                }}
                                                placeholder="Enter the answer"
                                                rows={4}
                                                required
                                            />
                                        </div>
                                    </div>
                                ) : (
                                    <Textarea
                                        id="edit-content"
                                        value={formData.content}
                                        onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                                        placeholder="Enter content"
                                        rows={6}
                                        required
                                    />
                                )}
                            </div>
                            <div className="flex items-center space-x-2">
                                <Switch
                                    id="edit-generate_embedding"
                                    checked={formData.generate_embedding}
                                    onCheckedChange={(checked) => setFormData({ ...formData, generate_embedding: checked })}
                                />
                                <Label htmlFor="edit-generate_embedding">Regenerate embedding</Label>
                            </div>
                        </div>
                        <DialogFooter className="mt-4">
                            <Button type="button" variant="outline" onClick={() => setIsEditing(false)}>
                                Cancel
                            </Button>
                            <Button type="submit">Save Changes</Button>
                        </DialogFooter>
                    </form>
                </DialogContent>
            </Dialog>

            {/* Delete Entry Dialog */}
            <Dialog open={isDeleting} onOpenChange={setIsDeleting}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Delete Entry</DialogTitle>
                        <DialogDescription>
                            Are you sure you want to delete this entry? This action cannot be undone.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="py-4">
                        <p className="text-sm text-muted-foreground mb-2">Content preview:</p>
                        <div className="border p-3 rounded-md max-h-[200px] overflow-y-auto">
                            {selectedEntry && formatContentPreview(selectedEntry.content, selectedSource.source_type)}
                        </div>
                    </div>
                    <DialogFooter>
                        <Button type="button" variant="outline" onClick={() => setIsDeleting(false)}>
                            Cancel
                        </Button>
                        <Button
                            type="button"
                            variant="destructive"
                            onClick={handleDeleteSubmit}
                        >
                            Delete
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>

            {/* View Entry Dialog */}
            <Dialog open={isViewing} onOpenChange={setIsViewing}>
                <DialogContent className="max-w-3xl">
                    <DialogHeader>
                        <DialogTitle>View Entry</DialogTitle>
                        <DialogDescription>
                            Viewing content from {selectedSource.name}.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="py-4 max-h-[500px] overflow-y-auto">
                        {selectedEntry && formatFullContent(selectedEntry.content, selectedSource.source_type)}

                        {selectedEntry?.embedding_vector && (
                            <div className="mt-4">
                                <h4 className="text-sm font-medium">Embedding Vector</h4>
                                <div className="mt-1 p-2 bg-muted/50 rounded-md max-h-[100px] overflow-y-auto">
                                    <code className="text-xs">
                                        {selectedEntry.embedding_vector.substring(0, 100)}
                                        {selectedEntry.embedding_vector.length > 100 ? "..." : ""}
                                    </code>
                                </div>
                            </div>
                        )}

                        {selectedEntry?.metadata && Object.keys(selectedEntry.metadata).length > 0 && (
                            <div className="mt-4">
                                <h4 className="text-sm font-medium">Metadata</h4>
                                <div className="mt-1 p-2 bg-muted/50 rounded-md">
                                    <pre className="text-xs">
                                        {JSON.stringify(selectedEntry.metadata, null, 2)}
                                    </pre>
                                </div>
                            </div>
                        )}
                    </div>
                    <DialogFooter>
                        <Button type="button" onClick={() => setIsViewing(false)}>
                            Close
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    )
} 